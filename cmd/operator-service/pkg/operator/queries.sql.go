// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package operator

import (
	"context"
)

const createOperator = `-- name: CreateOperator :exec
INSERT INTO operators (name, country, status)
VALUES ($1, $2, $3)
RETURNING id, name, country, status
`

type CreateOperatorParams struct {
	Name    string
	Country string
	Status  string
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) error {
	_, err := q.db.ExecContext(ctx, createOperator, arg.Name, arg.Country, arg.Status)
	return err
}

const deleteOperator = `-- name: DeleteOperator :exec
DELETE FROM operators WHERE id = $1
`

func (q *Queries) DeleteOperator(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOperator, id)
	return err
}

const getAllOperators = `-- name: GetAllOperators :many
SELECT id, name, country, status FROM operators
`

func (q *Queries) GetAllOperators(ctx context.Context) ([]Operator, error) {
	rows, err := q.db.QueryContext(ctx, getAllOperators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operator
	for rows.Next() {
		var i Operator
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperatorByID = `-- name: GetOperatorByID :one
SELECT id, name, country, status FROM operators WHERE id = $1
`

func (q *Queries) GetOperatorByID(ctx context.Context, id int32) (Operator, error) {
	row := q.db.QueryRowContext(ctx, getOperatorByID, id)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Status,
	)
	return i, err
}

const updateOperator = `-- name: UpdateOperator :exec
UPDATE operators
SET name = $1, country = $2, status = $3
WHERE id = $4
RETURNING id, name, country, status
`

type UpdateOperatorParams struct {
	Name    string
	Country string
	Status  string
	ID      int32
}

func (q *Queries) UpdateOperator(ctx context.Context, arg UpdateOperatorParams) error {
	_, err := q.db.ExecContext(ctx, updateOperator,
		arg.Name,
		arg.Country,
		arg.Status,
		arg.ID,
	)
	return err
}
